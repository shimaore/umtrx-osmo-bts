#!/bin/bash

# Build operation for Debian packages on a Debian system.

# These instructions are similar to the ones on
#   http://openbsc.osmocom.org/trac/wiki/network_from_scratch
# and
#   http://openbsc.osmocom.org/trac/wiki/OsmoTRX

# Preparation: install the necessary packages.

sudo aptitude install \
  autoconf libtool libosip2-dev libortp-dev g++ sqlite3 libsqlite3-dev libreadline6-dev libboost-all-dev \
  libusb-1.0.0-dev python-cheetah doxygen docutils \
  libusb-dev libftdi-dev

# Step 1: build the UHD library (and utilities)

UMTRX_BASE="`pwd`"

git clone https://github.com/fairwaves/UHD-Fairwaves.git
(cd UHD-Fairwaves/host && mkdir build && cd build/ && cmake -DCMAKE_INSTALL_PREFIX=$UMTRX_BASE/uhd .. && make && make test && make install)

export LD_LIBRARY_PATH="$UMTRX_BASE/uhd/lib"
export PKG_CONFIG_PATH="$UMTRX_BASE/uhd/lib/pkgconfig"

# Step 2: build the Transceiver (the component that talks to the UmTRX on one side,
#         and to osmo-bts on the other side).

# Slightly outdated:
# git clone https://github.com/fairwaves/osmo-trx.git

# Reference source:
git clone http://cgit.osmocom.org/osmo-trx/

(cd osmo-trx && autoreconf -i && ./configure --with-uhd && make)

# Step 3: build the BTS code.

# Reference source:
git clone -b jolly/trx git://git.osmocom.org/osmo-bts.git

# You also need to clone openbsc because some header files are being retrieved there.
git clone git://git.osmocom.org/openbsc.git

(cd osmo-bts && autoreconf -i && ./configure --enable-trx && make)

## Transceiver52M uses the OpenBTS framework, so will access /etc/OpenBTS/OpenBTS.db
echo 'Finish the installation with:'
echo '  sudo mkdir /etc/OpenBTS && sudo chown `whoami` /etc/OpenBTS'
# Alternatively simply `mkdir /etc/OpenBTS` and run the Transceiver as root, which is probably
# a good idea anyway.
# Bootstrap the database, otherwise Transceiver will not start:
echo '  DB=/etc/OpenBTS/OpenBTS.db'
echo '  sqlite3 -init ./sql/Transceiver.sql $DB ".quit"'
